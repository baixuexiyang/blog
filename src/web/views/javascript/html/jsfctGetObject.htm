<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>GetObject 函数</TITLE>
<!--CSS_START-->
<style>@import url(../html-vss/msdnie4a.css);</style>
<link disabled rel="stylesheet" href="../html-vss/msdn_ie3.css">
<!--CSS_END-->
</HEAD>
<BODY>


<!--Start Head-->
<TABLE class="banner" width="100%" CELLSPACING=0>
<TR>
<TD class="bannerleft" nowrap>JScript&nbsp;</TD>
<TD class="bannerright" nowrap><a href="../html-vss/jsTOC.htm">语言参考</a></TD>
</TR>
</TABLE>
<HR>
<!--End Head-->

<H1><A NAME="jsfctgetobject"></A>GetObject 函数</H1>

<P>从文件中返回对 <A HREF="glossary.htm#defautomationobject">Automation 对象</A> 的一个引用。 </P>

<P><CODE><B>GetObject(</B>[<I>pathname</I>] [<B>,</B> <I>class</I>]<B>)</B></CODE></P>

<H4>参数</H4>

<P class=dt>pathname</P>

<P class=indent>可选项。 完整的文件路径和名称，文件中包含了要检索的对象。 如果忽略了 <I>pathname</I> ，那么需要 <I>class</I> 。</P>

<P class=dt>class</P>

<P class=indent>可选项。 对象的<A HREF="glossary.htm#defclassjs">类</A>。</P>

<P>类参数采用的语法是 <I>appname.objectype</I> ，包括了以下部分：</P>

<P class=dt>appname</P>

<P class=indent>必选项。 提供对象的应用程序名称。</P>

<P class=dt>objectype</P>

<P class=indent>必选项。 要创建的对象的类的类型。</P>

<H4>说明</H4>

<P>使用 <B>GetObject</B> 函数可以从文件中访问一个 Automation 对象。 可以将由 <B>GetObject</B> 返回的对象赋值给对象变量。 例如： </P>

<PRE><CODE>var CADObject;
CADObject = <span class=cfe><B>GetObject(</B></span>"C:\\CAD\\SCHEMA.CAD"<span class=cfe><B>)</B></span>;</CODE></PRE>

<P>在执行这段代码时，将启动与指定的 <I>pathname</I> 相关的应用程序，所指定文件中的对象将被激活。 如果 <I>pathname</I> 是长度为零的字符串 ("") ，那么 <B>GetObject</B> 将返回指定类型的一个新实例。 如果忽略了 <I>pathname</I> 参数，那么 <B>GetObject</B> 将返回指定类型的当前活动实例。 如果不存在指定类型的对象，那么将出错。</P>

<P>一些应用程序允许激活文件的一部分。要实现此功能，可以在文件名的尾部添加一个感叹号 (!) ，然后在感叹号后跟上一个字符串来指定要激活的文件部分。关于如何创建这个字符串的详细信息，请参阅创建该对象的应用程序的文档。</P>

<P>例如，在一个绘画应用程序中，可能在文件中存储了绘画的很多层次。 可以使用下面的代码激活名为 SCHEMA.CAD 的图画中的一层。 </P>

<PRE><CODE>var LayerObject = <span class=cfe><B>GetObject(</B></span>"C:\\CAD\\SCHEMA<span class=cfe><B>.</B></span>CAD!Layer3"<span class=cfe><B>)</B></span>;</CODE></PRE>

<P>如果没有指定对象的类， Automation 将根据所提供的文件名来决定要启动的应用程序和要激活的对象。 但是，一些文件可能支持不止一种对象的类。 例如，一个图画可能支持三种不同的对象类型：应用程序对象、绘画对象，以及工具栏对象，所有这些都是同一个文件中的部分。 要指定文件中希望激活的对象，可以使用可选的 <I>class</I> 参数。 例如： </P>

<PRE><CODE>var MyObject;
MyObject = <span class=cfe><B>GetObject(</B></span>"C:\\DRAWINGS\\SAMPLE.DRW", "FIGMENT.DRAWING"<span class=cfe><B>)</B></span>;</CODE></PRE>

<P>在前面的例子中，FIGMENT 是绘画应用程序的名称，而 DRAWING 是它支持的一种对象类型。 对象被激活后，可以使用定义的对象变量来引用它。 在前面的例子中，可以通过对象变量 MyObject 来访问新对象的属性和方法。 例如： </P>

<PRE><CODE>MyObject.Line(9, 90);
MyObject.InsertText(9, 100, "Hello, world.");
MyObject.SaveAs("C:\\DRAWINGS\\SAMPLE.DRW");</CODE></PRE>

<P class=indent><B>注意 </B>如果当前已经有了对象的实例，或者想要由已经加载了的文件创建对象，那么可以使用 <B>GetObject</B> 函数。 如果没有当前的实例，而且也不想由已经加载的文件来启动对象，那么可以使用 <B>ActiveXObject</B> 对象。</P>

<P>如果对象自身已经注册为单实例对象了，那么无论执行多少次 <B>ActiveXObject</B> 也只会创建对象的一个实例。 对于单实例对象， <B>GetObject</B> 在用长度为零的字符串 ("") 语法调用时总是返回相同的实例，而如果忽略了 <I>pathname</I> 参数就会出错。</P>

<H4>要求</H4>

<P><A HREF="jsoriversioninformation.htm">版本 5</A></P>

<H4>请参阅</H4>

<P><A HREF="jsobjactivexobject.htm">ActiveXObject 对象</A></P>
<!--Copyright_START-->
<DIV CLASS="footer">
<HR><a href="jscopy.htm">&copy; 2000 Microsoft Corporation 版权所有。保留所有权利。使用规定。</a><br>
</DIV> <!--Copyright_END-->

</BODY>
</HTML>
