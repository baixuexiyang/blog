<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>变量范围</TITLE>
<!--CSS_START-->
<style>@import url(../html-vss/msdnie4a.css);</style>
<link disabled rel="stylesheet" href="../html-vss/msdn_ie3.css">
<!--CSS_END-->
</HEAD>
<BODY>


<!--Start Head-->
<TABLE class="banner" width="100%" CELLSPACING=0>
<TR>
<TD class="bannerleft" nowrap>JScript&nbsp;</TD>
<TD class="bannerright" nowrap><a href="../html-vss/jsTOC.htm">语言参考</a></TD>
</TR>
</TABLE>
<HR>
<!--End Head-->

<H1><A NAME="scope"></A>变量范围</H1>

<P>JScript 有两种变量范围：全局和局部。如果在任何函数定义之外声明了一个<A HREF="glossary.htm#defvariablejs">变量</A>，则该变量为全局变量，且该变量的值在整个持续范围内都可以访问和修改。如果在函数定义内声明了一个变量，则该变量为局部变量。每次执行该函数时都会创建和破坏该变量；且它不能被该函数外的任何事物访问。</P>

<P>像 C++ 这样的语言也有“块范围”。在这里，任何一对“{}”都定义新的范围。JScript 不支持块范围。</P>

<P>一个局部变量的名称可以与某个全局变量的名称相同，但这是完全不同和独立的两个变量。因此，更改一个变量的值不会影响另一个变量的值。在声明局部变量的函数内，只有该局部变量有意义。 </P>

<PRE><CODE>var aCentaur = "a horse with rider,";  // aCentaur </CODE>的全局定义。

<CODE>// JScript </CODE>代码，为简洁起见有省略。
<CODE>function antiquities()  // </CODE>在这个函数中声明了一个局部<CODE> aCentaur </CODE>变量。
{

<CODE>// JScript </CODE>代码，为简洁起见有省略。
<CODE>var aCentaur = "A centaur is probably a mounted Scythian warrior";</CODE>

<CODE>// JScript </CODE>代码，为简洁起见有省略。
&nbsp;&nbsp;&nbsp;<CODE>aCentaur += ", misreported; that is, ";  // </CODE>添加到局部变量。

<CODE>// JScript </CODE>代码，为简洁起见有省略。
}<CODE>  // </CODE>函数结束。

<CODE>var nothinginparticular = antiquities();</CODE>
<CODE>aCentaur += " as seen from a distance by a naive innocent.";</CODE>

<CODE>/*</CODE>
在函数内，该变量的值为<CODE> "A centaur is probably a mounted Scythian warrior,</CODE>
<CODE>misreported; that is, "</CODE>；在函数外，该变量的值为这句话的其余部分：
<CODE>"a horse with rider, as seen from a distance by a naive innocent."</CODE>
<CODE>*/  </CODE></PRE>

<P>很重要的一点是注意变量是否是在其所属范围的开始处声明的。有时这会导致意想不到的情况。 </P>

<PRE><CODE>tweak();
var aNumber = 100;
function tweak()  {
var newThing = 0;  // </CODE>显式声明<CODE> newThing </CODE>变量。

<CODE>    // </CODE>本语句将未定义的变量赋给<CODE> newThing</CODE>，因为已有名为<CODE> aNumber </CODE>的局部变量。
<CODE>    newThing = aNumber;</CODE>

<CODE>    //</CODE>下一条语句将值<CODE> 42 </CODE>赋给局部的<CODE> aNumber</CODE>。<CODE>aNumber = 42;</CODE>
<CODE>if (false)  {</CODE>
<CODE>    var aNumber;  // </CODE>该语句永远不会执行。
<CODE>    aNumber = 123;  //  </CODE>该语句永远不会执行。
<CODE>    }  // </CODE>条件语句结束。

}<CODE>  // </CODE>该函数定义结束。</PRE>

<P>当 JScript 运行函数时，首先查找所有的变量声明，</P>

<PRE><CODE>var someVariable;</CODE></PRE>

<P>并以未定义的初始值创建变量。如果变量被声明时有值，</P>

<PRE><CODE>var someVariable = "something";</CODE></PRE>

<P>那么该变量仍以未定义的值初始化，并且只有在运行了声明行时才被声明值取代，假如曾经被声明过。</P>

<P>JScript 在运行代码前处理变量声明，所以声明是位于一个条件块中还是其他某些结构中无关紧要。JScript 找到所有的变量后立即运行函数中的代码。如果变量是在函数中显式声明的 — 也就是说，如果它出现于赋值表达式的左边但没有用 var 声明 — 那么将把它创建为全局变量。</P>
<!--Copyright_START-->
<DIV CLASS="footer">
<HR><a href="jscopy.htm">&copy; 2000 Microsoft Corporation 版权所有。保留所有权利。使用规定。</a><br>
</DIV> <!--Copyright_END-->

</BODY>
</HTML>
