<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>设计 FileSystemObject</TITLE>
<!--CSS_START-->
<style>@import url(../html-vss/msdnie4a.css);</style>
<link disabled rel="stylesheet" href="../html-vss/msdn_ie3.css">
<!--CSS_END-->
</HEAD>
<BODY>


<!--Start Head-->
<TABLE class="banner" width="100%" CELLSPACING=0>
<TR>
<TD class="bannerleft" nowrap>JScript&nbsp;</TD>
<TD class="bannerright" nowrap><a href="../html-vss/jsTOC.htm">语言参考</a></TD>
</TR>
</TABLE>
<HR>
<!--End Head-->

<H1><A NAME="sgprogrammingfilesystemobject"></A>设计 FileSystemObject</H1>

<P>要用 <B>FileSystemObject</B> (FSO) 对象模式来编程，则：

<UL type=disc>
	<LI>使用 CreateObject 方法来创建 FileSystemObject 对象。 </li>

	<LI>在新创建的对象上使用适当的方法。 </li>

	<LI>访问对象的属性。 </li>
</UL>

<P>FSO 对象模式包含在 Scripting 类型库中，该库位于 Scrrun.dll 文件中。因而，要使用 FSO 对象模式，必须把 Scrrun.dll 放在 Web 服务器的适当系统目录中。</P>

<H2>创建 FileSystemObject 对象</H2>

<P>首先，使用 <B>CreateObject</B> 对象来创建 <B>FileSystemObject</B> 对象， 在 VBScript 中，使用下面的代码来创建 <B>FileSystemObject</B> 的一个实例： </P>

<PRE><CODE>Dim fso
Set fso = CreateObject("Scripting.FileSystemObject")</CODE></PRE>

<P>&nbsp;&nbsp;示例代码示范了如何创建 <B>FileSystemObject</B> 的一个实例。</P>

<P>在 JScript 中，使用下面的代码来做同样的事情：</P>

<PRE><CODE>var fso;
fso = new ActiveXObject("Scripting.FileSystemObject");</CODE></PRE>

<P>在这两个示例中，<B>Scripting</B> 是类型库的名字，而 <B>FileSystemObject</B> 则是想要创建的对象的名字。可以只创建 <B>FileSystemObject</B> 对象的一个实例，而不管试图创建另一个实例的次数。</P>

<H2>使用适当的方法</H2>

<P>其次，使用 <B>FileSystemObject</B> 对象的适当方法。例如，要创建一个新的对象，则使用 <B>CreateTextFile</B> 或 <B>CreateFolder</B> （FSO 对象模式不支持驱动器的创建或删除）。</P>

<P>要删除对象，则使用 <B>FileSystemObject</B> 对象的 <B>DeleteFile</B> 和 <B>DeleteFolder</B> 方法，或 <B>File</B> 和 <B>Folder</B> 对象的 <B>Delete</B> 方法。也可以使用适当的方法，来复制和移动文件与文件夹。 </P>

<P class=indent><B>注意&nbsp;&nbsp;<B>&nbsp;</B>FileSystemObject</B> 对象模式中的某些功能是多余的。例如，可以用 <B>FileSystemObject</B> 对象的 <B>CopyFile</B> 方法，也可以用 <B>File</B> 对象的 <B>Copy</B> 方法来复制文件。这两种方法功能是相同的；两种方法都能使编程灵活。</P>

<H2>访问现有驱动器、文件和文件夹</H2>

<P>要访问现有驱动器、文件或文件夹，则使用 <B>FileSystemObject</B> 对象中的适当的 "get" 方法：

<UL type=disc>
	<LI>GetDrive </li>

	<LI>GetFolder </li>

	<LI>GetFile </li>
</UL>

<P>在 VBScript 中要访问现有文件：</P>

<PRE><CODE>Dim fso, f1
Set fso = CreateObject("Scripting.FileSystemObject")
Set f1 = fso.GetFile("c:\test.txt")</CODE></PRE>

<P>在 JScript 中要做同样的事情，则使用下面的代码：</P>

<PRE><CODE>var fso, f1;
fso = new ActiveXObject("Scripting.FileSystemObject");
f1 = fso.GetFile("c:\\test.txt");</CODE></PRE>

<P>不要对新创建的对象使用 "get" 方法，因为 "create" 函数已经返回那个对象的一个句柄。例如，如果使用 <B>CreateFolder</B> 方法创建了一个新的文件夹，则不要使用 <B>GetFolder</B> 方法来访问它的属性，如 <B>Name</B>、<B>Path</B>、<B>Size</B>等等。只需设一个变量给 <B>CreateFolder</B> 函数，来获得新创建文件夹的句柄名，然后访问它的属性、方法和事件。要在 VBScript 中这样做，则使用下面的代码：</P>

<PRE><CODE>Sub CreateFolder
</CODE>&nbsp;&nbsp;&nbsp;<CODE>Dim fso, fldr</CODE>
<CODE>&nbsp;&nbsp;&nbsp;Set fso = CreateObject("Scripting.FileSystemObject")</CODE>
<CODE>&nbsp;&nbsp;&nbsp;Set fldr = fso.CreateFolder("C:\MyTest")</CODE>
<CODE>&nbsp;&nbsp;&nbsp;Response.Write "Created folder: " &amp; fldr.Name</CODE>
<CODE>End Sub</CODE></PRE>

<P>在 JScript 中给 <B>CreateFolder</B> 函数设置一个变量，则使用下面的语法：</P>

<PRE><CODE>function CreateFolder()
{
</CODE>&nbsp;&nbsp;&nbsp;<CODE>var fso, fldr;</CODE>
<CODE>&nbsp;&nbsp;&nbsp;fso = new ActiveXObject("Scripting.FileSystemObject");</CODE>
<CODE>&nbsp;&nbsp;&nbsp;fldr = fso.CreateFolder("C:\\MyTest");</CODE>
<CODE>&nbsp;&nbsp;&nbsp;Response.Write("Created folder: " + fldr.Name);</CODE>
}</PRE>

<H2>访问对象的属性</H2>

<P>一旦有了对象的句柄，就可以访问它的属性。例如，要获得特定文件夹的名字，首先创建该对象的一个实例，然后用适当的方法获得它的句柄（在这个例子中是 <B>GetFolder</B> 方法，因为该文件夹已经存在了）。 </P>

<P>在 VBScript 中，用该代码来获得 <B>GetFolder</B> 方法的一个句柄：</P>

<PRE><CODE>Set fldr = fso.GetFolder("c:\")</CODE></PRE>

<P>在 JScript 中要做同样的事情，则使用下面的代码：</P>

<PRE><CODE>var fldr = fso.GetFolder("c:\\");</CODE></PRE>

<P>现在，已经有了 <B>Folder</B> 对象的句柄，就可以检查它的 <B>Name</B> 属性了。在 VBScript 中使用下面的代码来检查：</P>

<PRE><CODE>Response.Write "Folder name is: " &amp; fldr.Name</CODE></PRE>

<P>在 JScript 中要检查 <B>Name</B> 属性，则使用下面的语法：</P>

<PRE><CODE>Response.Write("Folder name is: " + fldr.Name);</CODE></PRE>

<P>要找出最后一次修改文件的时间，则使用下面的 VBScript 语法：</P>

<PRE><CODE>Dim fso, f1
Set fso = CreateObject("Scripting.FileSystemObject")
' </CODE>获得要查询的文件对象。
<CODE>Set f1 = fso.GetFile("c:\detlog.txt")</CODE>&nbsp;&nbsp;&nbsp;
<CODE>' </CODE>打印信息。
<CODE>Response.Write "File last modified: " &amp; f1.DateLastModified </CODE></PRE>

<P>要用 JScript 找出上一次修改的文件，则使用下面的代码：</P>

<PRE><CODE>var fso, f1;
fso = new ActiveXObject("Scripting.FileSystemObject");
// </CODE>获得要查询的文件对象。
<CODE>f1 = fso.GetFile("c:\\detlog.txt");</CODE>&nbsp;&nbsp;&nbsp;
<CODE>// </CODE>打印信息。
<CODE>Response.Write("File last modified: " + f1.DateLastModified); </CODE></PRE>
<!--Copyright_START-->
<DIV CLASS="footer">
<HR><a href="jscopy.htm">&copy; 2000 Microsoft Corporation 版权所有。保留所有权利。使用规定。</a><br>
</DIV> <!--Copyright_END-->

</BODY>
</HTML>
